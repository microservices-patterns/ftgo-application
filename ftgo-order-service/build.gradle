
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:$springCloudContractDependenciesVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'

        classpath "org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:${js2pVersion}"
        classpath "io.eventuate.tram.core:eventuate-tram-spring-commands"
        classpath "io.eventuate.tram.core:eventuate-tram-spring-events"

        classpath(platform("io.eventuate.platform:eventuate-platform-dependencies:$eventuatePlatformVersion"))

    }
}

apply plugin: FtgoServicePlugin

apply plugin: 'spring-cloud-contract'
apply plugin: 'docker-compose'
apply plugin: 'com.google.protobuf'

apply plugin: IntegrationTestsPlugin
apply plugin: ComponentTestsPlugin

apply plugin: FtgoJSONSchema2PojoPlugin

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:$springCloudContractDependenciesVersion"
    }
}

contracts {
    contractsDslDir = new File("../ftgo-order-service-contracts/src/main/resources/contracts")
    packageWithBaseClasses = 'net.chrisrichardson.ftgo.orderservice.contract'
    generatedTestSourcesDir = project.file("${project.buildDir}/generated-integration-test-sources/contracts")
    sourceSet = "integrationTest"
}

sourceSets {
    integrationTest {
        java {
            srcDir project.file("${project.buildDir}/generated-integration-test-sources/contracts")
        }
    }
}

compileTestGroovy.enabled=false

componentTest.dependsOn(assemble)


dockerCompose {

    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_SAGA_VERSION", eventuateTramSagasImageVersion
    environment.put "EVENTUATE_JAVA_BASE_IMAGE_VERSION", eventuateExamplesBaseImageVersion
    environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion

    projectName = null

    integrationTests {
        projectName = null
        removeOrphans = true
        retainContainersOnStartupFailure = true
        startedServices = [ 'mysql']
        stopContainers = true
    }

    componentTests {
        projectName = null
        removeOrphans = true
        retainContainersOnStartupFailure = true
        startedServices = [ 'ftgo-order-service']
        //forceRecreate = true
	    stopContainers = true
    }

}

integrationTest.dependsOn(integrationTestsComposeUp)
componentTestsComposeUp.dependsOn(integrationTestsComposeUp)
componentTest.dependsOn(componentTestsComposeUp)


protobuf {
    protoc {
        // Download from repositories
        artifact = "com.google.protobuf:protoc:$protocVersion"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                // To generate deprecated interfaces and static bindService method,
                // turn the enable_deprecated option to true below:
                option 'enable_deprecated=false'
            }
        }
    }
}

apply plugin: 'idea'

idea {
    module {
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
    }
}

// This is already done by ComponentTestsPlugin
// apply plugin: 'eclipse'

eclipse {
  sourceSets {
    main {
      java {
         srcDirs += ["build/generated/source/proto/main/java", "build/generated/source/proto/main/grpc"]
      }
    }
  }
}

dependencies {

    implementation("io.netty:netty-codec-http2:4.1.72.Final")
    implementation("io.netty:netty-codec:4.1.72.Final")
    implementation("io.netty:netty-transport:4.1.72.Final")
    implementation("io.netty:netty-common:4.1.72.Final")
    implementation("io.netty:netty-buffer:4.1.72.Final")
    implementation("io.netty:netty-resolver:4.1.72.Final")

    ftgoApiSpecification project(":ftgo-consumer-service-api-spec")
    ftgoApiSpecification project(":ftgo-accounting-service-api-spec")
    ftgoApiSpecification project(":ftgo-restaurant-service-api-spec")

    implementation project(":common-swagger")
    implementation project(":ftgo-common-jpa")

    implementation "io.eventuate.tram.core:eventuate-tram-aggregate-domain-events"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-jdbc-kafka"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-commands"

    implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-orchestration-simple-dsl"

    implementation project(":ftgo-accounting-service-api")
    implementation project(":ftgo-consumer-service-api")
    implementation project(":ftgo-kitchen-service-api")
    implementation project(":ftgo-restaurant-service-api")
    implementation project(":ftgo-order-service-api")


    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation 'javax.el:javax.el-api:2.2.5'

    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    implementation "io.microservices.tools.canvas:microservice-canvas-springmvc:$microserviceCanvasVersion"
    implementation "io.microservices.tools.canvas:microservice-canvas-extractor-tram-sagas:$microserviceCanvasVersion"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-messaging"
    implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-orchestration"

    implementation('org.apache.kafka:kafka-clients:2.3.0') {
        force = true
    }

    testImplementation "io.eventuate.util:eventuate-util-test"
    testImplementation "io.eventuate.tram.core:eventuate-tram-test-util"

    testImplementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-in-memory"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

    // Added this stuff

    testImplementation "net.chrisrichardson.ftgo:ftgo-accounting-service-contracts:unspecified:stubs"
    testImplementation "net.chrisrichardson.ftgo:ftgo-consumer-service-contracts:unspecified:stubs"
    testImplementation "net.chrisrichardson.ftgo:ftgo-kitchen-service-contracts:unspecified:stubs"
    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"
    testImplementation 'io.rest-assured:rest-assured:3.0.6'
    testImplementation 'io.rest-assured:spring-mock-mvc:3.0.6'
    testImplementation "io.rest-assured:json-path:3.0.6"

    testImplementation "io.eventuate.tram.core:eventuate-tram-spring-testing-support-cloud-contract"

    testImplementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-testing-support"

    componentTestImplementation 'info.cukes:cucumber-java:1.2.5'
    componentTestImplementation 'info.cukes:cucumber-junit:1.2.5'
    componentTestImplementation 'info.cukes:cucumber-spring:1.2.5'

    testImplementation project(":ftgo-test-util")
    testImplementation "org.hamcrest:hamcrest:2.1"

    integrationTestImplementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-testing-support-cloud-contract"
    integrationTestImplementation "io.eventuate.tram.core:eventuate-tram-spring-in-memory"

}

ftgoJsonSchema2Pojo {

    ftgoConsumerService {
        source = files("${ftgoApiSpecsDir}/ValidateOrderByConsumer.json")
        targetPackage = "net.chrisrichardson.ftgo.consumerservice.api"
        includeAdditionalProperties = false
        generateBuilders = true
        useLongIntegers = true
    }
    ftgoAccountingService {
        source = files("${ftgoApiSpecsDir}/messages")
        targetPackage = "net.chrisrichardson.ftgo.accountservice.api"
        includeAdditionalProperties = false
        generateBuilders = true
        useLongIntegers = true
    }
    ftgoRestaurantService {
        source = files("${ftgoApiSpecsDir}/ftgo-restaurant-service-api-spec/messages")
        targetPackage = "net.chrisrichardson.ftgo.restaurantservice.events"
        includeAdditionalProperties = false
        generateBuilders = true
        useLongIntegers = true
    }

}
