buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementPluginVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:$springCloudContractDependenciesVersion"
    }
}

apply plugin: WaitForMySqlPlugin
apply plugin: 'docker-compose'

subprojects {

    apply plugin: "java"

    // TODO apply plugin: 'pmd'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    group = "net.chrisrichardson.ftgo"

    repositories {
        eventuateMavenRepoUrl.split('[ ,]').each { repoUrl -> maven { url repoUrl.trim() } }

        mavenCentral()
        jcenter()

        maven {
            url 'https://jitpack.io'
        }

        maven {
            url "${project.rootDir}/build/repo"
        }

    }

    dependencies {

        implementation(platform("io.eventuate.platform:eventuate-platform-dependencies:$eventuatePlatformVersion"))
        constraints {
                compile ("io.netty:netty-codec-http2") {
                    version {
                        strictly("4.1.72.Final")
                    }
                }
        }


    }
}

task buildContracts(type: GradleBuild) {
  tasks = subprojects.collect { it.name }.findAll { it.endsWith("-contracts") }.collect { ":" + it + ":publish"}
}

task compileAll(type: GradleBuild) {
  tasks = ["testClasses", "compileIntegrationTestJava", "compileComponentTestJava"]
}

dockerCompose {

  environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
  environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
  environment.put "EVENTUATE_SAGA_VERSION", eventuateTramSagasImageVersion
  environment.put "EVENTUATE_JAVA_BASE_IMAGE_VERSION", eventuateExamplesBaseImageVersion
  environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion

  projectName = null
  removeOrphans = true
  retainContainersOnStartupFailure = true

  if (project.hasProperty('startedServices'))
    startedServices= project.ext.startedServices.split(',')

  mysql {
      projectName = null
      startedServices = ["mysql"]
  }    
  
  infrastructure {
      projectName = null
      startedServices = ["mysql", "dynamodblocal-init", "kafka", "zookeeper"]
  }    
  
  // TODO with flyway - initialize after services
  
  eventuateCdcService {
      projectName = null
      startedServices = ["cdc-service"]
  }    
  
  kafkaGui {
      projectName = null
      startedServices = ["kafka-gui"]
  }  
}

composeUp.dependsOn(infrastructureComposeUp)

subprojects.each {
  if (it.name.endsWith("-service") || it.name.endsWith("-gateway")) {
    composeBuild.dependsOn(":" + it.name + ":assemble")
    composeUp.dependsOn(":" + it.name + ":assemble")
  }
 }