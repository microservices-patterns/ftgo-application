
buildscript {
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementPluginVersion"
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:$springCloudContractDependenciesVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
    }
    repositories {
        mavenCentral()
        jcenter()
    }
}

apply plugin: FtgoServicePlugin
apply plugin: "io.spring.dependency-management"
// apply plugin: 'spring-cloud-contract'
apply plugin: IntegrationTestsPlugin
apply plugin: 'docker-compose'

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:$springCloudContractDependenciesVersion"
    }
}

dependencies {
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.11.158'

    implementation project(":common-swagger")

    implementation(project(":ftgo-order-service-api")) {
        exclude module: "spring-boot-starter-data-jpa"
    }

    implementation "io.eventuate.tram.core:eventuate-tram-spring-events"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-messaging"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-consumer-kafka"

    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation 'javax.el:javax.el-api:2.2.5'

    implementation('org.apache.kafka:kafka-clients:2.3.0') {
        force = true
    }
    implementation 'io.eventuate.tram.sagas:eventuate-tram-sagas-participant:0.20.0.RELEASE'
    implementation 'io.eventuate.tram.sagas:eventuate-tram-sagas-participant:0.20.0.RELEASE'
    implementation 'io.eventuate.tram.sagas:eventuate-tram-sagas-spring-participant:0.20.0.RELEASE'
    implementation project(path: ':ftgo-common')

    testImplementation "io.eventuate.tram.core:eventuate-tram-spring-in-memory"
    testImplementation "io.eventuate.util:eventuate-util-test"
    testImplementation "io.eventuate.tram.core:eventuate-tram-test-util"

    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation "com.jayway.restassured:rest-assured:$restAssuredVersion"
    testImplementation "com.jayway.jsonpath:json-path:2.3.0"

    testImplementation "net.chrisrichardson.ftgo:ftgo-order-service-contracts:unspecified:stubs"
    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"
    testImplementation "io.eventuate.tram.core:eventuate-tram-spring-testing-support-cloud-contract"

    testImplementation "org.hamcrest:hamcrest:2.1"

}

dockerCompose {

    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_SAGA_VERSION", eventuateTramSagasImageVersion
    environment.put "EVENTUATE_JAVA_BASE_IMAGE_VERSION", eventuateExamplesBaseImageVersion
    environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion

    projectName = null

    integrationTests {
        projectName = null
        removeOrphans = true
        retainContainersOnStartupFailure = true
        startedServices = ["dynamodblocal", "dynamodblocal-init"]
        stopContainers = false
        if (System.getenv("FTGO_DOCKER_COMPOSE_FILES") != null)
            useComposeFiles = System.getenv("FTGO_DOCKER_COMPOSE_FILES").split(",").collect { "../" + it }
    }
}

integrationTest.dependsOn(integrationTestsComposeUp)
